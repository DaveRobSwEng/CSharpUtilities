///////////////////////////////////////////////////////////
//  StringDefinition.cs
//  Implementation of the Class StringDefinition
//  Generated by Enterprise Architect
//  Created on:      05-Mar-2015 18:07:41
//  Original author: RobinsonD
///////////////////////////////////////////////////////////

namespace Sepura.DataDictionary
{
    using System.Xml.Linq;
    using Sepura.DataDictionary;

    /// <summary>
    /// Definition of a string type
    /// </summary>
    public class StringDefinition : TypeDefinition
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StringDefinition" /> class.
        /// </summary>
        public StringDefinition()
            : base("String", TypeId.BuiltInType)
        {
        }

        /// <summary>
        /// Creates a new Value object, deriving the value by decoding the specified bytes.
        /// Each derived class creates its corresponding value type
        /// </summary>
        /// <returns>The decoded value object</returns>
        /// <param name="theBytes">The collection of bytes containing the value to be decoded</param>
        /// <param name="parent">The parent.</param>
        public override Value Decode(ByteStore theBytes, Value parent)
        {
            return new StringValue(theBytes, this, parent);
        }

        /// <summary>
        /// Finishes construction of the object by populating properties of the object from
        /// the XML node
        /// </summary>
        /// <param name="theNode"></param>
        /// <param name="theManager"></param>
        public override void FinishConstruction(XElement theNode, DictionaryManager theManager)
        {
        }

        /// <summary>
        /// Create a new instance of the type populated with default values.
        /// </summary>
        /// <returns>New instance of the type populated with default values</returns>
        /// <param name="parent">The parent.</param>
        public override Value Instantiate(Value parent)
        {
            return null;
        }
    }
}