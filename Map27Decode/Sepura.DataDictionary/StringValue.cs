///////////////////////////////////////////////////////////
//  StringValue.cs
//  Implementation of the Class StringValue
//  Generated by Enterprise Architect
//  Created on:      05-Mar-2015 18:07:42
//  Original author: RobinsonD
///////////////////////////////////////////////////////////

namespace Sepura.DataDictionary
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Sepura.DataDictionary;

    /// <summary>
    /// Contains the value of a string parameter
    /// </summary>
    public class StringValue : Value
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StringValue"/> class.
        /// </summary>
        /// <param name="theBytes">The bytes.</param>
        /// <param name="theStringDefinition">The string definition.</param>
        /// <param name="parent">The parent.</param>
        public StringValue(ByteStore theBytes, StringDefinition theStringDefinition, Value parent)
            : base(theStringDefinition, parent)
        {
            List<Byte> stringBytes = new List<byte>();

            // Read bytes until they run out or we hit null terminator
            Byte theByte = 0xff;
            while (theBytes.ReadPosition < theBytes.PayloadLength && theByte != '\0')
            {
                theByte = theBytes.GetByte();
                stringBytes.Add(theByte);
            }

            m_Value = Encoding.ASCII.GetString(stringBytes.ToArray());
        }

        /// <summary>
        /// Returns a <see cref="System.String"/> that represents this instance.
        /// </summary>
        /// <returns>A <see cref="System.String"/> that represents this instance.</returns>
        public override string ToString()
        {
            return m_Value;
        }

        /// <summary>
        /// The value
        /// </summary>
        private string m_Value = String.Empty;
    }
}